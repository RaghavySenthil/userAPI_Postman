{
	"info": {
		"_postman_id": "f1b1946f-41c7-4efa-bd44-14f89ff9797e",
		"name": "Application-LMS_User_Module",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26211004"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "User Sign In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJsonData =pm.response.json();\r",
									"pm.test(\"Validate Status Code\",function()\r",
									"{\r",
									"    if(pm.response.code == 200)\r",
									"    {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.environment.set(\"token\", responseJsonData.token)\r",
									"        pm.collectionVariables.set(\"token\", responseJsonData.token)\r",
									"      }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{Password}}\",\n  \"userLoginEmailId\": \"{{userLoginEmailId}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURl-AppliLMS}}/login",
							"host": [
								"{{BaseURl-AppliLMS}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"<string>\",\n  \"userLoginEmailId\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"email\": \"<string>\",\n  \"roles\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"status\": \"<string>\",\n  \"token\": \"<string>\",\n  \"type\": \"<string>\",\n  \"userId\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "programBatch",
					"item": [
						{
							"name": "{batchId}",
							"item": [
								{
									"name": "Get User by Program Batches",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/programBatch/:batchId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"programBatch",
												":batchId"
											],
											"variable": [
												{
													"key": "batchId",
													"value": "8453",
													"description": "(Required) batchId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programBatch/:batchId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programBatch",
														":batchId"
													],
													"variable": [
														{
															"key": "batchId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "byProgramBatches_InvalidEndpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/programBatch/:batchId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"programBatch",
												":batchId"
											],
											"variable": [
												{
													"key": "batchId",
													"value": "84588",
													"description": "(Required) batchId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programBatch/:batchId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programBatch",
														":batchId"
													],
													"variable": [
														{
															"key": "batchId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "byProgramBatches_InvalidEndpointAlphanumeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/programBatch/:batchId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"programBatch",
												":batchId"
											],
											"variable": [
												{
													"key": "batchId",
													"value": "84ab",
													"description": "(Required) batchId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programBatch/:batchId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programBatch",
														":batchId"
													],
													"variable": [
														{
															"key": "batchId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "byProgramBatches_InvalidBaseURL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{InvalidBaseURL}}/users/programBatch/:batchId",
											"host": [
												"{{InvalidBaseURL}}"
											],
											"path": [
												"users",
												"programBatch",
												":batchId"
											],
											"variable": [
												{
													"key": "batchId",
													"value": "8453",
													"description": "(Required) batchId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programBatch/:batchId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programBatch",
														":batchId"
													],
													"variable": [
														{
															"key": "batchId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "byProgramBatches_InvalidAuth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "xyz",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/programBatch/:batchId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"programBatch",
												":batchId"
											],
											"variable": [
												{
													"key": "batchId",
													"value": "8453",
													"description": "(Required) batchId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programBatch/:batchId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programBatch",
														":batchId"
													],
													"variable": [
														{
															"key": "batchId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "byProgramBatches_InvalidMethod",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/programBatch/:batchId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"programBatch",
												":batchId"
											],
											"variable": [
												{
													"key": "batchId",
													"value": "8453",
													"description": "(Required) batchId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programBatch/:batchId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programBatch",
														":batchId"
													],
													"variable": [
														{
															"key": "batchId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "programs",
					"item": [
						{
							"name": "{programId}",
							"item": [
								{
									"name": "Get User for Program_Validendpoint/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/programs/:programId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"programs",
												":programId"
											],
											"variable": [
												{
													"key": "programId",
													"value": "16617",
													"description": "(Required) programId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programs/:programId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programs",
														":programId"
													],
													"variable": [
														{
															"key": "programId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "Get User for Program_InValidendpoint/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/programs/:programId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"programs",
												":programId"
											],
											"variable": [
												{
													"key": "programId",
													"value": "16637",
													"description": "(Required) programId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programs/:programId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programs",
														":programId"
													],
													"variable": [
														{
															"key": "programId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "Get User for Program_alphanumeric_endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/programs/:programId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"programs",
												":programId"
											],
											"variable": [
												{
													"key": "programId",
													"value": "166ab",
													"description": "(Required) programId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programs/:programId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programs",
														":programId"
													],
													"variable": [
														{
															"key": "programId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "Get User for Program_InvalidAUTH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "xyz",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/programs/:programId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"programs",
												":programId"
											],
											"variable": [
												{
													"key": "programId",
													"value": "166ab",
													"description": "(Required) programId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programs/:programId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programs",
														":programId"
													],
													"variable": [
														{
															"key": "programId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "Get User for Program_InvalidURL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{InvalidBaseURL}}/users/programs/:programId",
											"host": [
												"{{InvalidBaseURL}}"
											],
											"path": [
												"users",
												"programs",
												":programId"
											],
											"variable": [
												{
													"key": "programId",
													"value": "16617",
													"description": "(Required) programId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programs/:programId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programs",
														":programId"
													],
													"variable": [
														{
															"key": "programId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "Get User for Program_InvalidMethod",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//status line\r",
													"if(pm.response.code==200){\r",
													"pm.test(\"status line \", function () {\r",
													"    pm.expect(pm.response.status).to.include(\"OK\");\r",
													"   });\r",
													"   \r",
													"\r",
													"//Validate data\r",
													"\r",
													"\r",
													"pm.test(\"Validate data\", function() {\r",
													"    pm.response.to.have.jsonBody();\r",
													"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is valid\", function() {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
													"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
													"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
													"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
													"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
													"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
													"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
													"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
													"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
													"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
													"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
													"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
													"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
													"});\r",
													"\r",
													"\r",
													"    pm.test(\"Content-Type should be application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});\r",
													"// //Schema validation\r",
													"const schema = {\r",
													"               \"type\": \"object\",\r",
													"            \"additionalProperties\": false,\r",
													"            \"properties\": {\r",
													"                \"userComments\": {\"type\": \"string\"},\r",
													"                \"userEduPg\": {\"type\": \"string\"},\r",
													"                \"userEduUg\": {\"type\": \"string\" },\r",
													"                \"userFirstName\": {\"type\": \"string\"},\r",
													"                \"userId\": {\"type\": \"string\"},\r",
													"                \"userLastName\": {\"type\": \"string\"},\r",
													"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
													"                \"userLocation\": {\"type\": \"string\"},\r",
													"                \"userLoginEmail\": {\"type\": \"string\"},\r",
													"                \"userMiddleName\": {\"type\": \"string\"},\r",
													"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
													"                \"userTimeZone\": {\"type\": \"string\"},\r",
													"                \"userVisaStatus\": {\"type\": \"string\"\r",
													"                }\r",
													"            },\r",
													"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
													"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
													"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
													"                \"userVisaStatus\"],\r",
													"            \r",
													"        }   \r",
													"    \r",
													" pm.test('Validate schema',()=>{\r",
													"        pm.response.to.have.jsonSchema(schema);\r",
													"    });\r",
													"     \r",
													"\r",
													"};\r",
													" if(pm.response.code==400 || pm.response.code==409){\r",
													"pm.test(\"Validate Response Body\", function () {\r",
													"   var  responseBody = pm.response.json();\r",
													"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
													"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
													"});\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/programs/:programId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"programs",
												":programId"
											],
											"variable": [
												{
													"key": "programId",
													"value": "16617",
													"description": "(Required) programId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/programs/:programId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"programs",
														":programId"
													],
													"variable": [
														{
															"key": "programId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "roles",
					"item": [
						{
							"name": "{roleId}",
							"item": [
								{
									"name": "Get User by RoleID Validendpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/roles/:roleId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "R01",
													"description": "(Required) roleId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/roles/:roleId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"roles",
														":roleId"
													],
													"variable": [
														{
															"key": "roleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "Get User by RoleID Invalidendpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/roles/:roleId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "R11",
													"description": "(Required) roleId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/roles/:roleId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"roles",
														":roleId"
													],
													"variable": [
														{
															"key": "roleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "Get User by RoleID InvalidURL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{InvalidBaseURL}}/users/roles/:roleId",
											"host": [
												"{{InvalidBaseURL}}"
											],
											"path": [
												"users",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "R01",
													"description": "(Required) roleId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/roles/:roleId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"roles",
														":roleId"
													],
													"variable": [
														{
															"key": "roleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "Get User by RoleID Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "xyz",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/roles/:roleId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "R01",
													"description": "(Required) roleId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/roles/:roleId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"roles",
														":roleId"
													],
													"variable": [
														{
															"key": "roleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "Get User by RoleID InvalidMethod",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{BaseURl-AppliLMS}}/users/roles/:roleId",
											"host": [
												"{{BaseURl-AppliLMS}}"
											],
											"path": [
												"users",
												"roles",
												":roleId"
											],
											"variable": [
												{
													"key": "roleId",
													"value": "R01",
													"description": "(Required) roleId"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/roles/:roleId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"roles",
														":roleId"
													],
													"variable": [
														{
															"key": "roleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  },\n  {\n    \"userComments\": \"<string>\",\n    \"userEduPg\": \"<string>\",\n    \"userEduUg\": \"<string>\",\n    \"userFirstName\": \"<string>\",\n    \"userId\": \"<string>\",\n    \"userLastName\": \"<string>\",\n    \"userLinkedinUrl\": \"<string>\",\n    \"userLocation\": \"<string>\",\n    \"userLoginEmail\": \"<string>\",\n    \"userMiddleName\": \"<string>\",\n    \"userPhoneNumber\": \"<long>\",\n    \"userTimeZone\": \"<string>\",\n    \"userVisaStatus\": \"<string>\"\n  }\n]"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "{userId}",
					"item": [
						{
							"name": "Update User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//status line\r",
											"if(pm.response.code==200){\r",
											"pm.test(\"status line \", function () {\r",
											"    pm.expect(pm.response.status).to.include(\"OK\");\r",
											"   });\r",
											"   \r",
											"\r",
											"//Validate data\r",
											"\r",
											"\r",
											"pm.test(\"Validate data\", function() {\r",
											"    pm.response.to.have.jsonBody();\r",
											"    pm.response.to.have.jsonBody('userComments', pm.iterationData.get(\"Update_userComments\"));\r",
											"    pm.response.to.have.jsonBody('userEduPg', pm.iterationData.get(\"Update_userEduPg\"));\r",
											"    pm.response.to.have.jsonBody('userEduUg', pm.iterationData.get(\"Update_userEduUg\"));\r",
											"    pm.response.to.have.jsonBody('userFirstName', pm.iterationData.get(\"Update_userFirstName\"));\r",
											"    pm.response.to.have.jsonBody('userId', pm.iterationData.get(\"Update_userId\"));\r",
											"    pm.response.to.have.jsonBody('userLastName', pm.iterationData.get(\"Update_userLastName\"));\r",
											"    pm.response.to.have.jsonBody('userLinkedinUrl', pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
											"    pm.response.to.have.jsonBody('userLocation', pm.iterationData.get(\"Update_userLocation\"));\r",
											"    pm.response.to.have.jsonBody('userLoginEmail', pm.iterationData.get(\"Update_userLoginEmail\"));\r",
											"    pm.response.to.have.jsonBody('userMiddleName', pm.iterationData.get(\"Update_userMiddleName\"));\r",
											"    pm.response.to.have.jsonBody('userPhoneNumber', pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
											"    pm.response.to.have.jsonBody('userTimeZone', pm.iterationData.get(\"Update_userTimeZone\"));\r",
											"    pm.response.to.have.jsonBody('userVisaStatus', pm.iterationData.get(\"Update_userVisaStatus\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid\", function() {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.userComments).to.equal(pm.iterationData.get(\"Update_userComments\"));\r",
											"    pm.expect(responseBody.userEduPg).to.equal(pm.iterationData.get(\"Update_userEduPg\"));\r",
											"    pm.expect(responseBody.userEduUg).to.equal(pm.iterationData.get(\"Update_userEduUg\"));\r",
											"    pm.expect(responseBody.userFirstName).to.equal(pm.iterationData.get(\"Update_userFirstName\"));\r",
											"    pm.expect(responseBody.userId).to.equal(pm.iterationData.get(\"Update_userId\"));\r",
											"    pm.expect(responseBody.userLastName).to.equal(pm.iterationData.get(\"Update_userLastName\"));\r",
											"    pm.expect(responseBody.userLinkedinUrl).to.equal(pm.iterationData.get(\"Update_userLinkedinUrl\"));\r",
											"    pm.expect(responseBody.userLocation).to.equal(pm.iterationData.get(\"Update_userLocation\"));\r",
											"    pm.expect(responseBody.userLoginEmail).to.equal(pm.iterationData.get(\"Update_userLoginEmail\"));\r",
											"    pm.expect(responseBody.userMiddleName).to.equal(pm.iterationData.get(\"Update_userMiddleName\"));\r",
											"    pm.expect(responseBody.userPhoneNumber).to.equal(pm.iterationData.get(\"Update_userPhoneNumber\"));\r",
											"    pm.expect(responseBody.userTimeZone).to.equal(pm.iterationData.get(\"Update_userTimeZone\"));\r",
											"    pm.expect(responseBody.userVisaStatus).to.equal(pm.iterationData.get(\"Update_userVisaStatus\"));\r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Content-Type should be application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"});\r",
											"// //Schema validation\r",
											"const schema = {\r",
											"               \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"userComments\": {\"type\": \"string\"},\r",
											"                \"userEduPg\": {\"type\": \"string\"},\r",
											"                \"userEduUg\": {\"type\": \"string\" },\r",
											"                \"userFirstName\": {\"type\": \"string\"},\r",
											"                \"userId\": {\"type\": \"string\"},\r",
											"                \"userLastName\": {\"type\": \"string\"},\r",
											"                \"userLinkedinUrl\": {\"type\": \"string\"},\r",
											"                \"userLocation\": {\"type\": \"string\"},\r",
											"                \"userLoginEmail\": {\"type\": \"string\"},\r",
											"                \"userMiddleName\": {\"type\": \"string\"},\r",
											"                \"userPhoneNumber\": {\"type\": \"integer\"},\r",
											"                \"userTimeZone\": {\"type\": \"string\"},\r",
											"                \"userVisaStatus\": {\"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\"userComments\",\"userEduPg\",\"userEduUg\",\"userFirstName\",\r",
											"                \"userId\",\"userLastName\",\"userLinkedinUrl\",\"userLocation\",\r",
											"                \"userLoginEmail\",\"userMiddleName\",\"userPhoneNumber\",\"userTimeZone\",\r",
											"                \"userVisaStatus\"],\r",
											"            \r",
											"        }   \r",
											"    \r",
											" pm.test('Validate schema',()=>{\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"    });\r",
											"     \r",
											"\r",
											"};\r",
											" if(pm.response.code==400 || pm.response.code==409){\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"   var  responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.status).to.eql(pm.iterationData.get(\"Bad Request\"));\r",
											"    pm.expect(responseBody.message).to.eql(pm.iterationData.get(\"Conflict\"));\r",
											"});\r",
											"}\r",
											"/*const csv = require('csv-parser');\r",
											"const fs = require('fs');\r",
											"\r",
											"// Array to store parsed CSV data\r",
											"let parsedData = [];\r",
											"\r",
											"// Read the CSV file\r",
											"fs.createReadStream('Put_request_UpdateUser.csv')\r",
											"  .pipe(csv())\r",
											"  .on('data', (row) => {\r",
											"    // Process each row of CSV data\r",
											"    Object.keys(row).forEach(key => {\r",
											"        // Handle blank or null values\r",
											"        if (row[key] === '' || row[key] === null) {\r",
											"            // Replace blank or null values with a default value\r",
											"            row[key] = 'N/A';\r",
											"            // Or handle them differently based on your requirements\r",
											"        }\r",
											"    });\r",
											"    parsedData.push(row);\r",
											"  })\r",
											"  .on('end', () => {\r",
											"    // All data has been read\r",
											"    console.log(parsedData);\r",
											"    // Use parsedData for further processing or validation\r",
											"  });*/\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userComments\": \"{{Update_userComments}}\",\n  \"userEduPg\": \"{{Update_userEduPg}}\",\n  \"userEduUg\": \"{{Update_userEduUg}}\",\n  \"userFirstName\": \"{{Update_userFirstName}}\",\n  \"userId\": \"{{Update_userId}}\",\n  \"userLastName\": \"{{Update_userLastName}}\",\n  \"userLinkedinUrl\": \"{{Update_userLinkedinUrl}}\",\n  \"userLocation\": \"{{Update_userLocation}}\",\n  \"userLoginEmail\": \"{{Update_userLoginEmail}}\",\n  \"userMiddleName\": \"{{Update_userMiddleName}}\",\n  \"userPhoneNumber\": \"{{Update_userPhoneNumber}}\",\n  \"userTimeZone\": \"{{Update_userTimeZone}}\",\n  \"userVisaStatus\": \"{{Update_userVisaStatus}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURl-AppliLMS}}/users/:userId",
									"host": [
										"{{BaseURl-AppliLMS}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "U56",
											"description": "(Required) userId"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userComments\": \"<string>\",\n  \"userEduPg\": \"<string>\",\n  \"userEduUg\": \"<string>\",\n  \"userFirstName\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"userLastName\": \"<string>\",\n  \"userLinkedinUrl\": \"<string>\",\n  \"userLocation\": \"<string>\",\n  \"userLoginEmail\": \"<string>\",\n  \"userMiddleName\": \"<string>\",\n  \"userPhoneNumber\": \"<long>\",\n  \"userTimeZone\": \"<string>\",\n  \"userVisaStatus\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"userComments\": \"<string>\",\n  \"userEduPg\": \"<string>\",\n  \"userEduUg\": \"<string>\",\n  \"userFirstName\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"userLastName\": \"<string>\",\n  \"userLinkedinUrl\": \"<string>\",\n  \"userLocation\": \"<string>\",\n  \"userLoginEmail\": \"<string>\",\n  \"userMiddleName\": \"<string>\",\n  \"userPhoneNumber\": \"<long>\",\n  \"userTimeZone\": \"<string>\",\n  \"userVisaStatus\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "Get all Users with Facets/Filters-Validendpoint",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{BaseURl-AppliLMS}}/v2/users",
									"host": [
										"{{BaseURl-AppliLMS}}"
									],
									"path": [
										"v2",
										"users"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"facets\": {\n    \"facetedFields\": [\n      {\n        \"displayName\": \"<string>\",\n        \"filterValues\": [\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          },\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"displayName\": \"<string>\",\n        \"filterValues\": [\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          },\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          }\n        ]\n      }\n    ]\n  },\n  \"users\": [\n    {\n      \"userComments\": \"<string>\",\n      \"userEduPg\": \"<string>\",\n      \"userEduUg\": \"<string>\",\n      \"userFirstName\": \"<string>\",\n      \"userId\": \"<string>\",\n      \"userLastName\": \"<string>\",\n      \"userLinkedinUrl\": \"<string>\",\n      \"userLocation\": \"<string>\",\n      \"userLoginEmail\": \"<string>\",\n      \"userMiddleName\": \"<string>\",\n      \"userPhoneNumber\": \"<long>\",\n      \"userTimeZone\": \"<string>\",\n      \"userVisaStatus\": \"<string>\"\n    },\n    {\n      \"userComments\": \"<string>\",\n      \"userEduPg\": \"<string>\",\n      \"userEduUg\": \"<string>\",\n      \"userFirstName\": \"<string>\",\n      \"userId\": \"<string>\",\n      \"userLastName\": \"<string>\",\n      \"userLinkedinUrl\": \"<string>\",\n      \"userLocation\": \"<string>\",\n      \"userLoginEmail\": \"<string>\",\n      \"userMiddleName\": \"<string>\",\n      \"userPhoneNumber\": \"<long>\",\n      \"userTimeZone\": \"<string>\",\n      \"userVisaStatus\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all Users with Facets/Filters-InvalidEndpoint",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{BaseURl-AppliLMS}}/v2/users1",
									"host": [
										"{{BaseURl-AppliLMS}}"
									],
									"path": [
										"v2",
										"users1"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"facets\": {\n    \"facetedFields\": [\n      {\n        \"displayName\": \"<string>\",\n        \"filterValues\": [\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          },\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"displayName\": \"<string>\",\n        \"filterValues\": [\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          },\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          }\n        ]\n      }\n    ]\n  },\n  \"users\": [\n    {\n      \"userComments\": \"<string>\",\n      \"userEduPg\": \"<string>\",\n      \"userEduUg\": \"<string>\",\n      \"userFirstName\": \"<string>\",\n      \"userId\": \"<string>\",\n      \"userLastName\": \"<string>\",\n      \"userLinkedinUrl\": \"<string>\",\n      \"userLocation\": \"<string>\",\n      \"userLoginEmail\": \"<string>\",\n      \"userMiddleName\": \"<string>\",\n      \"userPhoneNumber\": \"<long>\",\n      \"userTimeZone\": \"<string>\",\n      \"userVisaStatus\": \"<string>\"\n    },\n    {\n      \"userComments\": \"<string>\",\n      \"userEduPg\": \"<string>\",\n      \"userEduUg\": \"<string>\",\n      \"userFirstName\": \"<string>\",\n      \"userId\": \"<string>\",\n      \"userLastName\": \"<string>\",\n      \"userLinkedinUrl\": \"<string>\",\n      \"userLocation\": \"<string>\",\n      \"userLoginEmail\": \"<string>\",\n      \"userMiddleName\": \"<string>\",\n      \"userPhoneNumber\": \"<long>\",\n      \"userTimeZone\": \"<string>\",\n      \"userVisaStatus\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all Users with Facets/Filters-InvalidAuth",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "xyz",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{BaseURl-AppliLMS}}/v2/users",
									"host": [
										"{{BaseURl-AppliLMS}}"
									],
									"path": [
										"v2",
										"users"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"facets\": {\n    \"facetedFields\": [\n      {\n        \"displayName\": \"<string>\",\n        \"filterValues\": [\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          },\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"displayName\": \"<string>\",\n        \"filterValues\": [\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          },\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          }\n        ]\n      }\n    ]\n  },\n  \"users\": [\n    {\n      \"userComments\": \"<string>\",\n      \"userEduPg\": \"<string>\",\n      \"userEduUg\": \"<string>\",\n      \"userFirstName\": \"<string>\",\n      \"userId\": \"<string>\",\n      \"userLastName\": \"<string>\",\n      \"userLinkedinUrl\": \"<string>\",\n      \"userLocation\": \"<string>\",\n      \"userLoginEmail\": \"<string>\",\n      \"userMiddleName\": \"<string>\",\n      \"userPhoneNumber\": \"<long>\",\n      \"userTimeZone\": \"<string>\",\n      \"userVisaStatus\": \"<string>\"\n    },\n    {\n      \"userComments\": \"<string>\",\n      \"userEduPg\": \"<string>\",\n      \"userEduUg\": \"<string>\",\n      \"userFirstName\": \"<string>\",\n      \"userId\": \"<string>\",\n      \"userLastName\": \"<string>\",\n      \"userLinkedinUrl\": \"<string>\",\n      \"userLocation\": \"<string>\",\n      \"userLoginEmail\": \"<string>\",\n      \"userMiddleName\": \"<string>\",\n      \"userPhoneNumber\": \"<long>\",\n      \"userTimeZone\": \"<string>\",\n      \"userVisaStatus\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all Users with Facets/Filters-Invalidurl",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{InvalidBaseURL}}/v2/users",
									"host": [
										"{{InvalidBaseURL}}"
									],
									"path": [
										"v2",
										"users"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"facets\": {\n    \"facetedFields\": [\n      {\n        \"displayName\": \"<string>\",\n        \"filterValues\": [\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          },\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"displayName\": \"<string>\",\n        \"filterValues\": [\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          },\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          }\n        ]\n      }\n    ]\n  },\n  \"users\": [\n    {\n      \"userComments\": \"<string>\",\n      \"userEduPg\": \"<string>\",\n      \"userEduUg\": \"<string>\",\n      \"userFirstName\": \"<string>\",\n      \"userId\": \"<string>\",\n      \"userLastName\": \"<string>\",\n      \"userLinkedinUrl\": \"<string>\",\n      \"userLocation\": \"<string>\",\n      \"userLoginEmail\": \"<string>\",\n      \"userMiddleName\": \"<string>\",\n      \"userPhoneNumber\": \"<long>\",\n      \"userTimeZone\": \"<string>\",\n      \"userVisaStatus\": \"<string>\"\n    },\n    {\n      \"userComments\": \"<string>\",\n      \"userEduPg\": \"<string>\",\n      \"userEduUg\": \"<string>\",\n      \"userFirstName\": \"<string>\",\n      \"userId\": \"<string>\",\n      \"userLastName\": \"<string>\",\n      \"userLinkedinUrl\": \"<string>\",\n      \"userLocation\": \"<string>\",\n      \"userLoginEmail\": \"<string>\",\n      \"userMiddleName\": \"<string>\",\n      \"userPhoneNumber\": \"<long>\",\n      \"userTimeZone\": \"<string>\",\n      \"userVisaStatus\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get all Users with Facets/Filters-InvalidMethod",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{BaseURl-AppliLMS}}/v2/users",
									"host": [
										"{{BaseURl-AppliLMS}}"
									],
									"path": [
										"v2",
										"users"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v2/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"facets\": {\n    \"facetedFields\": [\n      {\n        \"displayName\": \"<string>\",\n        \"filterValues\": [\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          },\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"displayName\": \"<string>\",\n        \"filterValues\": [\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          },\n          {\n            \"count\": \"<integer>\",\n            \"name\": \"<string>\"\n          }\n        ]\n      }\n    ]\n  },\n  \"users\": [\n    {\n      \"userComments\": \"<string>\",\n      \"userEduPg\": \"<string>\",\n      \"userEduUg\": \"<string>\",\n      \"userFirstName\": \"<string>\",\n      \"userId\": \"<string>\",\n      \"userLastName\": \"<string>\",\n      \"userLinkedinUrl\": \"<string>\",\n      \"userLocation\": \"<string>\",\n      \"userLoginEmail\": \"<string>\",\n      \"userMiddleName\": \"<string>\",\n      \"userPhoneNumber\": \"<long>\",\n      \"userTimeZone\": \"<string>\",\n      \"userVisaStatus\": \"<string>\"\n    },\n    {\n      \"userComments\": \"<string>\",\n      \"userEduPg\": \"<string>\",\n      \"userEduUg\": \"<string>\",\n      \"userFirstName\": \"<string>\",\n      \"userId\": \"<string>\",\n      \"userLastName\": \"<string>\",\n      \"userLinkedinUrl\": \"<string>\",\n      \"userLocation\": \"<string>\",\n      \"userLoginEmail\": \"<string>\",\n      \"userMiddleName\": \"<string>\",\n      \"userPhoneNumber\": \"<long>\",\n      \"userTimeZone\": \"<string>\",\n      \"userVisaStatus\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Password",
			"value": "Numpyninja@1"
		},
		{
			"key": "userLoginEmailId",
			"value": "sdetorganizers@gmail.com"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "BaseURl-AppliLMS",
			"value": "lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms"
		},
		{
			"key": "InvalidBaseURL",
			"value": "lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/"
		}
	]
}